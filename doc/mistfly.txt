*mistfly* A simple, fast and informative statusline for Vim and (legacy) Neovim

OPTIONS                                                      *mistfly-options*

Default option values:
>
  let g:mistflySeparatorSymbol = '⎪'
  let g:mistflyProgressSymbol = '↓'
  let g:mistflyActiveTabSymbol = '▪'
  let g:mistflyGitBranchSymbol = ''
  let g:mistflyErrorSymbol = 'E'
  let g:mistflyWarningSymbol = 'W'
  let g:mistflyInformationSymbol = 'I'
  let g:mistflyTabLine = v:false
  let g:mistflyWinBar = v:false
  let g:mistflyWithFileIcon = v:true
  let g:mistflyWithGitBranch = v:true
  let g:mistflyWithGitStatus = v:true
  let g:mistflyWithDiagnosticStatus = v:true
  let g:mistflyWithSessionStatus = v:true
  let g:mistflyWithMacroStatus = v:false
  let g:mistflyWithSearchCount = v:false
  let g:mistflyWithSpellStatus = v:false
  let g:mistflyWithIndentStatus = v:false
<
------------------------------------------------------------------------------
mistflySeparatorSymbol~                             *g:mistflySeparatorSymbol*

The `mistflySeparatorSymbol` option specifies which character symbol to use
for segment separators in the `statusline`.

By default, the `⎪` character (Unicode `U+23AA`) will be displayed.

To specify your own separator symbol please add the following to your
initialization file:
>
  " Vimscript initialization file
  let g:mistflySeparatorSymbol = '<<SYMBOL-OF-YOUR-CHOOSING>>'

  -- Lua initialization file
  vim.g.mistflySeparatorSymbol = '<<SYMBOL-OF-YOUR-CHOOSING>>'
<
------------------------------------------------------------------------------
mistflyProgressSymbol~                               *g:mistflyProgressSymbol*

The `mistflyProgressSymbol` option specifies which character symbol to use to
indicate location-as-percentage in the `statusline`.

By default, the `↓` character (Unicode `U+2193`) will be displayed.

To specify your own progress symbol, or no symbol at all, please add the
following to your initialization file:
>
  " Vimscript initialization file
  let g:mistflyProgressSymbol = '<<SYMBOL-OF-YOUR-CHOOSING-OR-EMPTY>>'

  -- Lua initialization file
  vim.g.mistflyProgressSymbol = '<<SYMBOL-OF-YOUR-CHOOSING-OR-EMPTY>>'
<
------------------------------------------------------------------------------
mistflyActiveTabSymbol~                             *g:mistflyActiveTabSymbol*

The `mistflyActiveTabSymbol` option specifies which character symbol to use to
signify the active tab in the `tabline`.

By default, the `▪` character (Unicode `U+25AA`) will be displayed.

To specify your own active tab symbol please add the following to your
initialization file:
>
  " Vimscript initialization file
  let g:mistflyActiveTabSymbol = '<<SYMBOL-OF-YOUR-CHOOSING>>'

  -- Lua initialization file
  vim.g.mistflyActiveTabSymbol = '<<SYMBOL-OF-YOUR-CHOOSING>>'
<
------------------------------------------------------------------------------
mistflyGitBranchSymbol~                             *g:mistflyGitBranchSymbol*

The `mistflyGitBranchSymbol` option specifies which character symbol to use
when displaying Git branch details.

By default, the `` character (Powerline `U+E0A0`) will be displayed. Many
modern monospace fonts will contain that character.

To specify your own Git branch symbol, or no symbol at all, please add the
following to your initialization file:
>
  " Vimscript initialization file
  let g:mistflyGitBranchSymbol = '<<SYMBOL-OF-YOUR-CHOOSING-OR-EMPTY>>'

  -- Lua initialization file
  vim.g.mistflyGitBranchSymbol = '<<SYMBOL-OF-YOUR-CHOOSING-OR-EMPTY>>'
<
------------------------------------------------------------------------------
mistflyErrorSymbol~                                     *g:mistflyErrorSymbol*

The `mistflyErrorSymbol` option specifies which character symbol to use when
displaying diagnostic errors.

By default, the `E` character will be displayed.

To specify your own error symbol please add the following to your
initialization file:
>
  " Vimscript initialization file
  let g:mistflyErrorSymbol = '<<SYMBOL-OF-YOUR-CHOOSING>>'

  -- Lua initialization file
  vim.g.mistflyErrorSymbol = '<<SYMBOL-OF-YOUR-CHOOSING>>'
<
------------------------------------------------------------------------------
mistflyWarningSymbol~                                 *g:mistflyWarningSymbol*

The `mistflyWarningSymbol` option specifies which character symbol to use when
displaying diagnostic warnings.

By default, the `W` character will be displayed.

To specify your own warning symbol please add the following to your
initialization file:
>
  " Vimscript initialization file
  let g:mistflyWarningSymbol = '<<SYMBOL-OF-YOUR-CHOOSING>>'

  -- Lua initialization file
  vim.g.mistflyWarningSymbol = '<<SYMBOL-OF-YOUR-CHOOSING>>'
<
------------------------------------------------------------------------------
mistflyInformationSymbol~                         *g:mistflyInformationSymbol*

The `mistflyInformationSymbol` option specifies which character symbol to use
when displaying diagnostic information.

By default, the `I` character will be displayed.

To specify your own information symbol please add the following to your
initialization file:
>
  " Vimscript initialization file
  let g:mistflyInformationSymbol = '<<SYMBOL-OF-YOUR-CHOOSING>>'

  -- Lua initialization file
  vim.g.mistflyInformationSymbol = '<<SYMBOL-OF-YOUR-CHOOSING>>'
<
------------------------------------------------------------------------------
mistflyTabLine~                                             *g:mistflyTabLine*

The `mistflyTabLine` option specifies whether to let this plugin manage the
`tabline` in addition to the `statusline`.

By default, `tabline` management will not be undertaken.

If enabled, `mistfly` will render a simple numbered, and clickable,
window-space layout in the `tabline`; note, no buffers will be displayed in
the `tabline` since there are many plugins that already provide that
capability.

To enable `tabline` support please add the following to your initialization
file:
>
  " Vimscript initialization file
  let g:mistflyTabLine = v:true

  -- Lua initialization file
  vim.g.mistflyTabLine = true
<
------------------------------------------------------------------------------
mistflyWinBar~                                               *g:mistflyWinBar*

The `mistflyWinBar` option specifies whether to display Neovim's window bar at
the top of each window.

By default, window bars will not be displayed. Note, Neovim 0.8 (or later) is
required for this feature.

Displaying a window bar is recommended when Neovim's global statusline is
enabled via `set laststatus=3`; the `winbar` will then display the file name at
the top of each window to disambiguate splits. Also, if there is only one
window in the current tab then a `winbar` will not be displayed (it won't be
needed).

To enable Neovim's `winbar` feature please add the following to your
initialization file:
>
  " Vimscript initialization file
  let g:mistflyWinBar = v:true

  -- Lua initialization file
  vim.g.mistflyWinBar = true
<
------------------------------------------------------------------------------
mistflyWithFileIcon~                                   *g:mistflyWithFileIcon*

The `mistflyWithFileIcon` option specifies whether a filetype icon, from a
Nerd Font, will be displayed prior to the filename in the `statusline` (and
optional `winbar`).

Note, a Nerd Font (https://www.nerdfonts.com) must be active and the
vim-devicons (https://github.com/ryanoasis/vim-devicons) or nvim-web-devicons
(https://github.com/kyazdani42/nvim-web-devicons) plugin must also be
installed and active.

By default, a filetype icon will be displayed if possible.

To disable the display of a filetype icon please add the following to your
initialization file:
>
  " Vimscript initialization file
  let g:mistflyWithFileIcon = v:false

  -- lua initialization file
  vim.g.mistflyWithFileIcon = false
<
------------------------------------------------------------------------------
mistflyWithGitBranch~                                 *g:mistflyWithGitBranch*

The `mistflyWithGitBranch` option specifies whether to display Git branch
details in the `statusline`.

By default, Git branches will be displayed in the `statusline`.

To disable the display of Git branches in the `statusline` please add the
following to your initialization file:
>
  " Vimscript initialization file
  let g:mistflyWithGitBranch = v:false

  -- Lua initialization file
  vim.g.mistflyWithGitBranch = false
<
------------------------------------------------------------------------------
mistflyWithGitStatus~                                 *g:mistflyWithGitStatus*

The `mistflyWithGitStatus` option specifies whether to display the Git status
of the current buffer in the `statusline`.

The Gitsigns (https://github.com/lewis6991/gitsigns.nvim), GitGutter
(https://github.com/airblade/vim-gitgutter) and Signify
(https://github.com/mhinz/vim-signify) plugins are supported.

By default, the Git status will be displayed if one of the above plugins is
loaded.

To disable the display of Git status in the `statusline` please add the
following to your initialization file:
>
  " Vimscript initialization file
  let g:mistflyWithGitStatus = v:false

  -- Lua initialization file
  vim.g.mistflyWithGitStatus = false
<
------------------------------------------------------------------------------
mistflyWithDiagnosticStatus~                   *g:mistflyWithDiagnosticStatus*

The `mistflyWithDiagnosticStatus` option specifies whether to indicate the
presence of the diagnostics in the current buffer.

Neovim Diagnositics (https://neovim.io/doc/user/diagnostic.html), ALE
(https://github.com/dense-analysis/ale) and Coc
(https://github.com/neoclide/coc.nvim) are supported.

By default, diagnostics will be displayed if one of the above plugins is
loaded.

If diagnostic display is not wanted then please add the following to your
initialization file:
>
  " Vimscript initialization file
  let g:mistflyWithDiagnosticStatus = v:false

  -- Lua initialization file
  vim.g.mistflyWithDiagnosticStatus = false
<
------------------------------------------------------------------------------
mistflyWithSessionStatus~                         *g:mistflyWithSessionStatus*

The `mistflyWithSessionStatus` option specifies whether to display Obsession
(https://github.com/tpope/vim-obsession) session details in the `statusline`.

By default, session details will be displayed if the plugin is loaded.

To disable the display of session details in the `statusline` please add the
following to your initialization file:
>
  " Vimscript initialization file
  let g:mistflyWithSessionStatus = v:false

  -- Lua initialization file
  vim.g.mistflyWithSessionStatus = false
<
------------------------------------------------------------------------------
mistflyWithMacroStatus~                             *g:mistflyWithMacroStatus*

The `mistflyWithMacroStatus` option specifies whether to display
macro-recording status in the `statusline`.

By default, macro-recording status will not be displayed.

To enable the display of macro-recording status in the `statusline` please add
the following to your initialization file:
>
  " Vimscript initialization file
  let g:mistflyWithMacroStatus = v:true
  ```

  -- Lua initialization file
  vim.g.mistflyWithMacroStatus = true
<
------------------------------------------------------------------------------
mistflyWithSearchCount~                             *g:mistflyWithSearchCount*

The `mistflyWithSearchCount` option specifies whether to display the search
count in the `statusline`.

By default, search count will not be displayed.

To enable the display of the search count in the `statusline` please add the
following to your initialization file:
>
  " Vimscript initialization file
  let g:mistflyWithSearchCount = v:true

  -- Lua initialization file
  vim.g.mistflyWithSearchCount = true
<

Note, the search count is only displayed when the `hlsearch` option is set and
the search count result is not zero.
------------------------------------------------------------------------------
mistflyWithSpellStatus~                             *g:mistflyWithSpellStatus*

The `mistflyWithSpellStatus` option specifies whether to display the spell
status in the `statusline`.

By default, spell status will not be displayed.

To enable spell status in the `statusline` please add the following to your
initialization file:
>
  " Vimscript initialization file
  let g:mistflyWithSpellStatus = v:true

  -- Lua initialization file
  vim.g.mistflyWithSpellStatus = true
<
------------------------------------------------------------------------------
mistflyWithIndentStatus~                           *g:mistflyWithIndentStatus*

The `mistflyWithIndentStatus` option specifies whether to display the
indentation status as the last component in the `statusline`.

By default, indentation status will not be displayed.

Note, if the `expandtab` option is set, for the current buffer, then tab stop
will be displayed, for example `Tab:4` (tab equals four spaces); if on the
other hand `noexpandtab` option is set then shift width will be displayed
instead, for example `Spc:2` ('spc' short for 'space').

To enable indentation status please add the following to your initialization
file:
>
  " Vimscript initialization file
  let g:mistflyWithIndentStatus = v:true

  -- Lua initialization file
  vim.g.mistflyWithIndentStatus = true
<

vim:tw=78:ts=8:noet:ft=help:norl:
